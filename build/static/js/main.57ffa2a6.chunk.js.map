{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/ErrorBoundry.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["SearchBox","_ref","searchfield","searchChange","react_default","a","createElement","className","type","placeholder","onChange","Card","key","name","email","id","alt","src","concat","CardList","robots","map","user","i","components_Card","ErrorBoundry","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","children","Component","Scroll","style","overflowY","border","height","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialSearchState","intialRobotsState","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57ffa2a6.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox=({searchfield, searchChange})=>{\n    return(\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type=\"search\" \n                placeholder=\"search robots...\" \n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Card=({key, name, email, id})=>{\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200\"`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div> \n    );\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots })=>{\n    return(\n        <div>\n            {\n                robots.map((user, i) => {\n                    return(\n                        <Card key={i} id ={robots[i].id} name={robots[i].name} email={robots[i].email} />\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError : true})\n    }\n\n    render(){\n        if (this.state.hasError){\n            return <h1>Oops, something went wrong!</h1> \n        }\n        return(\n            this.props.children\n        )\n    }\n}\n\nexport default ErrorBoundry;\n","import React from 'react';\n\nconst Scroll=(props)=>{\n    return(\n        <div style={{overflowY: 'scroll', border: '1px solid black', height:'800px' }}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React, { Component } from 'react';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions.js';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error   \n    }\n}\n\nconst mapDispatchToProps = (dispatch) =>{\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component{\n\n    componentDidMount(){\n        this.props.onRequestRobots();\n    }\n\n    render(){\n        const { searchField , onSearchChange, robots , isPending }= this.props;\n        const filteredRobots= robots.filter(robots =>{\n            return robots.name.toLowerCase().includes(searchField.toLowerCase())\n        })\n        if (isPending){\n            return <h1>Loading...</h1>\n        }else{ \n            return (\n                <div className=\"tc\">\n                    <h1 className='f1'>RoboFriends</h1>\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            )\n        }   \n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n } from './constants.js';\n\nexport const setSearchField =(text)=>({\n    type: CHANGE_SEARCH_FIELD, \n    payload: text\n})\n\nexport const requestRobots =() => (dispatch)=>{\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED,\n } from './constants.js';\n\nconst initialSearchState= {\n    searchField: ''\n}\n\nexport const searchRobots=(state= initialSearchState, action={})=>{\n    switch (action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst intialRobotsState={\n    robots: [],\n    isPending: false,\n    error: ''\n}\n\nexport const requestRobots=(state=intialRobotsState, action={})=>{\n    switch (action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false});\n        default: \n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { searchRobots, requestRobots } from './reducers';\nimport thunkMiddleware from 'redux-thunk';\n\nconst rootReducer= combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render( \n    <Provider store={ store }>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}